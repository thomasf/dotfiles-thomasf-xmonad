#!/bin/bash
#
#   Xstart file -- to be launched by xsession or xinitrc
#   Man page: Xsession
#
#   TODO: This file really need some cleaning up!
#
#
# https://wiki.archlinux.org/index.php/ConsoleKit

# Fixes OpenJDK for usage with XMonad (or other non parenting window managers)
export _JAVA_AWT_WM_NONREPARENTING=1

# Fix alacritty starting with different scaling when >1 displays with physical
# DPI differences.
export WINIT_HIDPI_FACTOR=1

# Set the backbround color
[ $(which xsetroot ) ] \
  && xsetroot -solid '#073642' &

if [ -f "${HOME}/.config-private/xstart/$HOSTNAME" ]; then
  source "${HOME}/.config-private/xstart/$HOSTNAME"
fi

[[ -e ~/.config-xmonad/xstart-local ]] && \
  source ~/.config-xmonad/xstart-local


# A a hack for one specific console
# hostname=`hostname`
# [[ $hostname == mat ]] \
#     && xrandr --output VGA1 --right-of LVDS1 --primary \
#     && xrandr --output VGA1 --mode 1920x1080

# First, try to kill everyhing that might be started below
# It's important that applications are launched from this
# environment to get the right settings.
killall -q devmon
killall -q gpg-agent
killall -q ssh-agent
killall -q gnome-keyring-daemon
killall -q gnome-settings-daemon
killall -q blueman-applet
killall -q nm-applet
killall -q dropboxd
killall -q pulseaudio
killall -q compton
sleep 0.3

(
  hash docker 2> /dev/null && docker stop $(docker ps -q)
) &

# Launch a new dbus-session if not already running
# dbuslaunch="`which dbus-launch 2>/dev/null`"
# [ -n "$dbuslaunch" ] \
#   && [ -x "$dbuslaunch" ] \
#   && [ -z "$DBUS_SESSION_BUS_ADDRESS" ] \
#   && eval `$dbuslaunch --sh-syntax --exit-with-session`

# Source profile
[ -f "${HOME}/.profile" ] \
  && source "${HOME}/.profile"

# Source default bash environment
[ -f "${HOME}/.bashrc" ] \
  && source "${HOME}/.bashrc"

# Ensure sane file permissions etc.
[ -f "${HOME}/.bin/home-fix" ] \
  && "${HOME}/.bin/home-fix"

# Load gtk2 style settings
[ -f  "${HOME}/.config-xmonad/gtk/gtk-2.0/default" ] \
  && export GTK2_RC_FILES="${HOME}/.config-xmonad/gtk/gtk-2.0/default"


# Devmon udev mounter (part of udevil)
[ $(which devmon) ] \
  && devmon &

# unset gnome keyring daemon variables
unset GNOME_KEYRING_CONTROL
unset GNOME_KEYRING_PID

# Start gnupg or ssh agent
rm -f ~/.ssh/control:*
rm -f "${HOME}/.gnupg/S.*"
unset GPG_AGENT_INFO; unset SSH_AUTH_SOCK; unset SSH_AGENT_PID
if [ $(which gpg-agent) ]; then
  eval $(gpg-agent --daemon --sh --enable-ssh-support)
  SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)
elif [ $(which ssh-agent) ]; then
  eval $(ssh-agent -s)
fi
export SSH_AUTH_SOCK
export SSH_AGENT_PID

# Initialize gnome settings daemon
if [ $(which gnome-settings-daemon) ]; then
  gnome-settings-daemon 2>/dev/null &
  sleep 0.5
  (
    if [ $(which gconftool-2) ]; then
      gconftool-2 -t bool -s /apps/nautilus/preferences/show_desktop false
      gconftool-2 -t bool -s /desktop/gnome/volume_manager/automount_drives false
      gconftool-2 -t bool -s /apps/gnome_settings_daemon/screensaver/start_screensaver false
      gconftool-2 -t bool -s /apps/gnome-keyring/daemon-components/ssh false
      gconftool-2 -t bool -s /desktop/gnome/background/draw_background false
      gconftool-2 -t bool -s /apps/gnome_settings_daemon/plugins/background/active false
      gconftool-2 -t bool -s /apps/gnome_settings_daemon/plugins/ubuntuone/active false
      gconftool-2 -t bool -s /apps/gnome_settings_daemon/plugins/xrandr/active false
    fi
    if [ $(which dconf) ]; then
      dconf write /org/gnome/settings-daemon/plugins/media-keys/active false
      dconf write /org/gnome/desktop/background/draw-background false
      dconf write /org/gnome/desktop/background/show-desktop-icons false
      dconf write /org/gnome/desktop/media-handling/automount false
      dconf write /org/gnome/desktop/media-handling/automount-open false
      dconf write /org/gnome/desktop/media-handling/automount-never true
      dconf write /org/gnome/desktop/screensaver/idle-activation-enabled false
      dconf write /org/gnome/desktop/sound/event-sounds false
      dconf write /org/gnome/settings-daemon/plugins/background/active false
      dconf write /org/gnome/settings-daemon/plugins/xsettings/active false
      dconf write /org/gnome/settings-daemon/plugins/keyboard/active false
      dconf write /org/gnome/settings-daemon/plugins/keybindings/active false
    fi
  ) &
fi

# Initialize gnome settings daemon
if [ $(which gsettings) ]; then
    gsettings set org.gnome.settings-daemon.plugins.cursor active false
fi

# load Xresources
[ -f "${HOME}/.Xresources" ] \
  && xrdb -nocpp "${HOME}/.Xresources"

# Start music player daemon if it's available
if [ $(which mpd) ]; then
  (
    sleep 4
    mkdir -p ~/.mpd/playlists
    nohup mpd 2>/dev/null
    sleep 2
    # Avoid some madness
    if [ `which mpc` ]; then
      mpc -q repeat off
      mpc -q single off
      mpc -q consume off
    fi
  ) &
fi

# Configure keyboard mode buttons
if [ -f $HOME/.bin-xmonad/kbd ]; then
  ${HOME}/.bin-xmonad/kbd
fi

# # Launch google chrome
# [ $(which google-chrome) ] \
#   && google-chrome --no-startup-window 2>/dev/null &

# Launch avfs daemon
[ $(which mountavfs) ] \
  && mountavfs 2>/dev/null &

Launch drop box
[ -x ~/.dropbox-dist/dropboxd ] \
  && ~/.dropbox-dist/dropboxd &

# Launch the network manager applet
[ $(which nm-applet) ] \
  && nm-applet --sm-disable &

# Launch the bluetooth manager applet
[ $(which blueman-applet) ] \
  && blueman-applet &

# Launch gpome (binds apple hw control keys)
# TODO pomme does not seem to work with ubuntu 13.10
#      Maybe its not needed anymore?
# [ $(which gpomme) ] \
#   && gpomme &


# [ $(which x.remind-time) ] \
#  && x.remind-time &

# This seems to fix xdg-open opening urls in chrome for me
DE='xfce'
export DE

# Set a default web browser
[ $(which www) ] \
  && BROWSER=$(which www) \
  && export BROWSER

if [ $(which miniserv) ]; then
  miniserv &
fi

if [ $(which xscreensaver) ]; then
  xscreensaver --no-splash &
fi

(
  darkmodearg=l
  if [ $(which zenity) ]; then
    sleep 1
    if ! zenity --question --text="Bright?"; then
      darkmodearg=d
    fi
  fi
  darkmode $darkmodearg
  (
    sleep 3
    [ $(which comptonrestart) ] \
      && comptonrestart
  ) &
) &

export HOST="$HOSTNAME"

# Set default window manger (xmonad) or try user selection
WM=""
if [ $(which xmonad) ]; then
  rm -f ${HOME}/.xmonad/xmonad.state
  WM="xmonad"
fi

[ "z" = "z$WM" ] \
  && xmessage "!!! No window manager found/selected !!!"

# Start the window manager
while [ ! "" = "$WM" ]; do
  ${WM}
  sleep 2
done
